CREATE DATABASE IF NOT EXISTS project_management;
USE project_management;
CREATE TABLE user (
    user_id INT PRIMARY KEY AUTO_INCREMENT,
    full_name VARCHAR(255) NOT NULL,
    user_name VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    mobile VARCHAR(20),
    password VARCHAR(255) NOT NULL,
    role_setting_id INT, -- To be added later
    status ENUM('active', 'inactive', 'unverified') DEFAULT 'unverified',
    note TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT, -- To reference user_id
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT  -- To reference user_id
    -- Foreign keys will be added after the setting table is created
);

-- ------------------------------------------------------------
-- 2. Insert Initial User (Admin)
-- ------------------------------------------------------------
INSERT INTO user (full_name, user_name, email, mobile, password, status, created_by_id, updated_by_id) VALUES
('John Doe', 'johndoe', 'john@example.com', '1234567890', 'hashed_password', 'active', NULL, NULL);

-- ------------------------------------------------------------
-- 3. Create the Setting Table with Foreign Keys to User
-- ------------------------------------------------------------
CREATE TABLE setting (
    setting_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    value VARCHAR(255) NOT NULL,
    type VARCHAR(50) NOT NULL, -- Categorizes settings
    priority INT,
    status ENUM('active', 'inactive') DEFAULT 'active',
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (created_by_id) REFERENCES user(user_id),
    FOREIGN KEY (updated_by_id) REFERENCES user(user_id)
);

-- ------------------------------------------------------------
-- 4. Insert Master Data into Setting Table
-- (Referencing the Initial User with user_id = 1)
-- ------------------------------------------------------------

-- User Roles
INSERT INTO setting (name, value, type, description, created_by_id, updated_by_id) VALUES
('Admin', 'Administrator with full access', 'user_role', 'Administrator with full access', 1, 1),
('Project Manager', 'Manages projects and teams', 'user_role', 'Manages projects and teams', 1, 1),
('Developer', 'Develops and maintains software', 'user_role', 'Develops and maintains software', 1, 1),
('Tester', 'Performs software testing', 'user_role', 'Performs software testing', 1, 1);

-- Departments
INSERT INTO setting (name, value, type, description, created_by_id, updated_by_id) VALUES
('IT', 'Information Technology Department', 'department', 'Information Technology Department', 1, 1),
('HR', 'Human Resources Department', 'department', 'Human Resources Department', 1, 1),
('Finance', 'Finance and Accounting Department', 'department', 'Finance and Accounting Department', 1, 1),
('Marketing', 'Marketing and Sales Department', 'department', 'Marketing and Sales Department', 1, 1);

-- Project Roles
INSERT INTO setting (name, value, type, description, created_by_id, updated_by_id) VALUES
('Project Lead', 'Leads the project team', 'project_role', 'Leads the project team', 1, 1),
('Developer', 'Develops project features', 'project_role', 'Develops project features', 1, 1),
('Tester', 'Tests project features', 'project_role', 'Tests project features', 1, 1),
('Designer', 'Designs user interface', 'project_role', 'Designs user interface', 1, 1);

-- Requirement Complexity
INSERT INTO setting (name, value, type, description, created_by_id, updated_by_id) VALUES
('Low', 'Simple requirement, easy to implement', 'requirement_complexity', 'Simple requirement, easy to implement', 1, 1),
('Medium', 'Moderate complexity, requires some effort', 'requirement_complexity', 'Moderate complexity, requires some effort', 1, 1),
('High', 'Complex requirement, significant effort needed', 'requirement_complexity', 'Complex requirement, significant effort needed', 1, 1);

-- Requirement Status
INSERT INTO setting (name, value, type, description, created_by_id, updated_by_id) VALUES
('New', 'Newly created requirement', 'requirement_status', 'Newly created requirement', 1, 1),
('In Progress', 'Requirement is being worked on', 'requirement_status', 'Requirement is being worked on', 1, 1),
('Review', 'Requirement is under review', 'requirement_status', 'Requirement is under review', 1, 1),
('Done', 'Requirement is completed', 'requirement_status', 'Requirement is completed', 1, 1);

-- Issue Types
INSERT INTO setting (name, value, type, description, created_by_id, updated_by_id) VALUES
('Bug', 'Software defect', 'issue_type', 'Software defect', 1, 1),
('Feature', 'New feature request', 'issue_type', 'New feature request', 1, 1),
('Enhancement', 'Improvement to existing feature', 'issue_type', 'Improvement to existing feature', 1, 1),
('Task', 'General task', 'issue_type', 'General task', 1, 1);

-- ------------------------------------------------------------
-- 5. Update the Initial User to Set role_setting_id to 'Admin'
-- ------------------------------------------------------------
UPDATE user 
SET role_setting_id = (
    SELECT setting_id 
    FROM setting 
    WHERE name = 'Admin' AND type = 'user_role'
) 
WHERE user_id = 1;

-- ------------------------------------------------------------
-- 6. Update created_by_id and updated_by_id for the Initial User
-- (Assuming the user is self-created)
-- ------------------------------------------------------------
UPDATE user 
SET created_by_id = 1, updated_by_id = 1 
WHERE user_id = 1;

-- ------------------------------------------------------------
-- 7. Add Foreign Key Constraints for created_by_id and updated_by_id in User Table
-- ------------------------------------------------------------
ALTER TABLE user
    ADD CONSTRAINT fk_user_created_by FOREIGN KEY (created_by_id) REFERENCES user(user_id),
    ADD CONSTRAINT fk_user_updated_by FOREIGN KEY (updated_by_id) REFERENCES user(user_id);

-- ------------------------------------------------------------
-- 8. Insert Additional Users
-- ------------------------------------------------------------
INSERT INTO user (full_name, user_name, email, mobile, password, role_setting_id, status, created_by_id, updated_by_id) VALUES
('Jane Smith', 'janesmith', 'jane@example.com', '0987654321', 'hashed_password', 
    (SELECT setting_id FROM setting WHERE name = 'Project Manager' AND type = 'user_role'), 'active', 1, 1),
('Bob Johnson', 'bobjohnson', 'bob@example.com', '1122334455', 'hashed_password', 
    (SELECT setting_id FROM setting WHERE name = 'Developer' AND type = 'user_role'), 'active', 1, 1),
('Alice Brown', 'alicebrown', 'alice@example.com', '5544332211', 'hashed_password', 
    (SELECT setting_id FROM setting WHERE name = 'Tester' AND type = 'user_role'), 'active', 1, 1);

-- ------------------------------------------------------------
-- 9. Create the Project Table
-- ------------------------------------------------------------
CREATE TABLE project (
    project_id INT PRIMARY KEY AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    code VARCHAR(50) NOT NULL UNIQUE,
    start_date DATE,
    end_date DATE,
    dept_setting_id INT, -- References setting
    status ENUM('pending', 'in-progress', 'closed', 'cancelled') DEFAULT 'pending',
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (dept_setting_id) REFERENCES setting(setting_id),
    FOREIGN KEY (created_by_id) REFERENCES user(user_id),
    FOREIGN KEY (updated_by_id) REFERENCES user(user_id)
);

-- ------------------------------------------------------------
-- 10. Insert Data into Project Table
-- ------------------------------------------------------------
INSERT INTO project (name, code, start_date, end_date, dept_setting_id, status, description, created_by_id, updated_by_id) VALUES
('E-commerce Platform', 'ECOM001', '2024-01-01', '2024-12-31', 
    (SELECT setting_id FROM setting WHERE name = 'IT' AND type = 'department'), 'in-progress', 'Building a new e-commerce platform', 1, 1),
('HR Management System', 'HRMS001', '2024-02-01', '2024-08-31', 
    (SELECT setting_id FROM setting WHERE name = 'HR' AND type = 'department'), 'pending', 'Developing an HR management system', 1, 1),
('Financial Reporting Tool', 'FIN001', '2024-03-01', '2024-09-30', 
    (SELECT setting_id FROM setting WHERE name = 'Finance' AND type = 'department'), 'in-progress', 'Creating a financial reporting tool', 1, 1);

-- ------------------------------------------------------------
-- 11. Create the Allocation Table with 'rate' Instead of 'effort'
-- ------------------------------------------------------------
CREATE TABLE allocation (
    allocation_id INT PRIMARY KEY AUTO_INCREMENT,
    member_id INT,
    project_id INT,
    role_setting_id INT, -- References setting
    from_date DATE,
    to_date DATE,
    rate TINYINT NOT NULL, -- Changed from effort FLOAT to rate TINYINT
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (member_id) REFERENCES user(user_id),
    FOREIGN KEY (project_id) REFERENCES project(project_id),
    FOREIGN KEY (role_setting_id) REFERENCES setting(setting_id),
    FOREIGN KEY (created_by_id) REFERENCES user(user_id),
    FOREIGN KEY (updated_by_id) REFERENCES user(user_id),
    CHECK (rate BETWEEN 1 AND 100) -- Ensures rate is between 1 and 100
);

-- ------------------------------------------------------------
-- 12. Insert Data into Allocation Table
-- ------------------------------------------------------------
INSERT INTO allocation (member_id, project_id, role_setting_id, from_date, to_date, rate, description, created_by_id, updated_by_id) VALUES
(1, 1, (SELECT setting_id FROM setting WHERE name = 'Project Lead' AND type = 'project_role'), '2024-01-01', '2024-12-31', 100, 'Project lead for E-commerce Platform', 1, 1),
(2, 1, (SELECT setting_id FROM setting WHERE name = 'Developer' AND type = 'project_role'), '2024-01-01', '2024-12-31', 80, 'Developer for E-commerce Platform', 1, 1),
(3, 2, (SELECT setting_id FROM setting WHERE name = 'Project Lead' AND type = 'project_role'), '2024-02-01', '2024-08-31', 100, 'Project lead for HR Management System', 1, 1),
(4, 2, (SELECT setting_id FROM setting WHERE name = 'Tester' AND type = 'project_role'), '2024-02-01', '2024-08-31', 60, 'Tester for HR Management System', 1, 1);

-- ------------------------------------------------------------
-- 13. Create the Requirement Table
-- ------------------------------------------------------------
CREATE TABLE requirement (
    req_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    owner_id INT,
    complexity_setting_id INT, -- References setting
    status_setting_id INT, -- References setting
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (owner_id) REFERENCES user(user_id),
    FOREIGN KEY (complexity_setting_id) REFERENCES setting(setting_id),
    FOREIGN KEY (status_setting_id) REFERENCES setting(setting_id),
    FOREIGN KEY (created_by_id) REFERENCES user(user_id),
    FOREIGN KEY (updated_by_id) REFERENCES user(user_id)
);

-- ------------------------------------------------------------
-- 14. Insert Data into Requirement Table
-- ------------------------------------------------------------
INSERT INTO requirement (title, owner_id, complexity_setting_id, status_setting_id, description, created_by_id, updated_by_id) VALUES
('User Authentication', 1, 
    (SELECT setting_id FROM setting WHERE name = 'Medium' AND type = 'requirement_complexity'), 
    (SELECT setting_id FROM setting WHERE name = 'In Progress' AND type = 'requirement_status'), 
    'Implement user authentication system', 1, 1),
('Product Catalog', 2, 
    (SELECT setting_id FROM setting WHERE name = 'High' AND type = 'requirement_complexity'), 
    (SELECT setting_id FROM setting WHERE name = 'New' AND type = 'requirement_status'), 
    'Create product catalog with search and filter options', 1, 1),
('Employee Onboarding', 3, 
    (SELECT setting_id FROM setting WHERE name = 'Medium' AND type = 'requirement_complexity'), 
    (SELECT setting_id FROM setting WHERE name = 'In Progress' AND type = 'requirement_status'), 
    'Develop employee onboarding workflow', 1, 1),
('Financial Reports', 4, 
    (SELECT setting_id FROM setting WHERE name = 'High' AND type = 'requirement_complexity'), 
    (SELECT setting_id FROM setting WHERE name = 'New' AND type = 'requirement_status'), 
    'Generate monthly and yearly financial reports', 1, 1);

-- ------------------------------------------------------------
-- 15. Create the Issue Table
-- ------------------------------------------------------------
CREATE TABLE issue (
    issue_id INT PRIMARY KEY AUTO_INCREMENT,
    title VARCHAR(255) NOT NULL,
    type_setting_id INT, -- References setting
    req_id INT,
    assigner_id INT,
    assignee_id INT,
    deadline DATE,
    status ENUM('pending', 'to do', 'doing', 'done', 'closed') DEFAULT 'pending',
    status_date TIMESTAMP,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    created_by_id INT,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    updated_by_id INT,
    FOREIGN KEY (type_setting_id) REFERENCES setting(setting_id),
    FOREIGN KEY (req_id) REFERENCES requirement(req_id),
    FOREIGN KEY (assigner_id) REFERENCES user(user_id),
    FOREIGN KEY (assignee_id) REFERENCES user(user_id),
    FOREIGN KEY (created_by_id) REFERENCES user(user_id),
    FOREIGN KEY (updated_by_id) REFERENCES user(user_id)
);

-- ------------------------------------------------------------
-- 16. Insert Data into Issue Table
-- ------------------------------------------------------------
INSERT INTO issue (title, type_setting_id, req_id, assigner_id, assignee_id, deadline, status, status_date, description, created_by_id, updated_by_id) VALUES
('Login page not responsive', 
    (SELECT setting_id FROM setting WHERE name = 'Bug' AND type = 'issue_type'), 
    1, 1, 2, '2024-02-15', 'doing', '2024-01-20', 'Login page is not displaying correctly on mobile devices', 1, 1),
('Add sorting to product list', 
    (SELECT setting_id FROM setting WHERE name = 'Feature' AND type = 'issue_type'), 
    2, 2, 3, '2024-03-31', 'to do', '2024-01-25', 'Implement sorting functionality for product catalog', 1, 1),
('Onboarding email not sending', 
    (SELECT setting_id FROM setting WHERE name = 'Bug' AND type = 'issue_type'), 
    3, 3, 4, '2024-02-28', 'pending', '2024-02-05', 'Automated onboarding email is not being sent to new employees', 1, 1),
('Incorrect calculation in yearly report', 
    (SELECT setting_id FROM setting WHERE name = 'Bug' AND type = 'issue_type'), 
    4, 4, 1, '2024-03-15', 'done', '2024-03-10', 'Fixed incorrect calculation in yearly financial report', 1, 1);